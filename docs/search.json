[
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "Essay",
    "section": "",
    "text": "Get data of text items from wikibase\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q209\nKurator: Seeger, Ulrike\n\n\n\n\n\n\n\n\nBau-, Ausstattungs- und Funktionsgeschichte\n\n\nDie hervorragend erhaltene wandfeste Ausstattung des Großen Saals, der 1639 als „großer Saahl“ [1] geführt wurde und seinen heute geläufigen Namen Rittersaal erst im Nachhinein erhielt, datiert aus den Jahren 1601 bis 1605. Am Beginn stand den Quellen zufolge der monumentale Saalkamin. Der Vertrag mit dem Bildhauer Michael Juncker aus Miltenberg datiert vom 7. September 1601.[2] Im November 1601 wurden mit Balthasar Katzenberger die Deckengemälde verdingt, der die Arbeiten 13 Monate später Anno 1602 abschloss.[3] 1603 signierte und datierte der Kalkschneider Gerhard Schmidt das Portal an der inneren Ostseite.[4] Die Jahreszahl 1605 zusammen mit den Initialen CL für den Kalkschneider Christoph Limmerich über der Tür zum Altan markieren den Abschluss der Arbeiten.[5]\n\n\nSeit 1710/11 wurde der Saal unter Graf Carl Ludwig behutsam dem barocken Zeitgeschmack angepasst und inhaltlich vom Jagd- zum gräflichen Rittersaal umgedeutet. Christian Thalwitzer hatte Balthasar Katzenbergers Deckengemälde „im großen Saal [zu] übermahlen, genau durch[zu]gehen und wo es Schaden genommen, mit allem Fleyß“ auszubessern.[6] Bei dieser Gelegenheit versah er die Gemälderahmen und die dazwischenliegenden Stuckrippen mit der bis heute gültigen roten Marmorierung.[7] An den Wänden wurden die Roll- und Beschlagwerkkartuschen der Schmuckzone ebenfalls rot marmoriert und an Kamin und Innenportal die rot marmorierten Schattenrahmen hinzugefügt.\n\n\nIn einem zweiten Schritt wurde der Sockel ringsum mit rot marmorierten Lambris versehen, die Christian Thalwitzer im Rechnungsjahr 1715/16 mit 51 Schloss- und Gartenveduten im Querformat[8] und 27 Orangenbäumen und anderen exotischen Kübelpflanzen im Hochformat bemalte. Die 12 ganzfigurigen Porträts männlicher Vorfahren zum Teil in Ritterrüstung, die dem Rittersaal seinen heutigen Namen gaben, schuf bereits 1710 Peter Franz Tassaert aus Rothenburg.[9]\n\n\nBeschreibung des Raumes\n\n\nDer 36,4 Meter lange, 11,7 Meter breite und 8,25 Meter hohe Saal[10] wird durch hohe segmentbogenförmige Fensternischen gegliedert, deren Achsen von großen Okuli weitergeführt werden. Im Gegenzug zu dieser Vertikalen beschränkt sich der reiche Stuckdekor friesartig auf die obere Wandzone, die oberhalb eines Gesimses auf der Höhe des oberen Drittels der Fenster beginnt. Dadurch, dass sich die Stuckdekoration in das obere Drittel der Fensterlaibungen hineinzieht, erwecken sie den Eindruck hoheitsvoll gestelzter Bögen.[11]\n\n\nAn der Westwand, neben der im ersten Joch der Hofseite der Saal über die Wendeltreppe betreten wird, erhebt sich ein monumentaler Kamin. Mit Kaminöffnung, Attikafeld und rundbogigem Auszug umfasst er drei Zonen, von denen Attika und Auszug in der Höhe der stuckierten Wandzone des Saals entsprechen. An der Ostwand, wo man den Saal Richtung Tafelstube verlässt, befindet sich ein prächtiges, 1603 datiertes stuckiertes Innenportal des Kalkschneiders Gerhard Schmidt.[12] Darüber verläuft, teilweise hinter dem Attikarelief, eine Empore beispielsweise für Musiker.\n\n\nDen Kamin flankieren stuckierte Darstellungen des Grafenpaars Wolfgang II. von Hohenlohe und Magdalena, geborene Prinzessin von Nassau-Katzenelnbogen mit ihrer jeweiligen Ahnenprobe.[13] Dem Graf wurde die zeremoniell höherrangige Seite heraldisch rechts des Kamins, der Gräfin die Seite heraldisch links des Kamins zugeteilt. Graf und Gräfin liegen jeweils auf der Seite einander abgewandt und blicken mit aufgestütztem Kopf in den Saal. Aus ihnen heraus wächst in der Art einer Wurzel Jesse die über fünf Generationen geführte Ahnenprobe. Der Graf trägt eine Rüstung mit Waffenrock und stützt seinen Ellenbogen auf einen Helm. Die Gräfin hat zwei Kinder im Arm, von denen das vordere ein Junge ist.\n\n\nAn den beiden Längsseiten nimmt die stuckierte Schmuckzone weit vorkragende, gleichfalls stuckierte Wandskulpturen wilder Tiere auf. Sie beziehen sich einerseits auf das Programm der Decke, das der höfischen Jagd in all ihren Ausformungen gewidmet ist. Andererseits sind sie auf die Kaminwand ausgerichtet, die mit ihren nachstehend zu erläuternden Bildthemen als Stellvertreter des Grafen, seiner konfessionellen Einstellung und seiner dynastischen Herkunft konzipiert ist. Zusammen mit einer gemalten Darstellung des lyraspielenden Orpheus an der Decke erlauben die Tiere in ihrer Ausrichtung auf den Kamin die Identifikation des Grafen mit Orpheus als Sinnbild des guten Herrschers. Diese hier erstmals entwickelte Deutung wird unten im Abschnitt „Programm und Synthese der Saalausstattung der Renaissance“ vorgetagen.\n\n\nKamin und Innenportal\n\n\nDer Kamin aus Andernacher Tuffstein von Michael Juncker und seinen Söhnen Hans und Zacharias aus Miltenberg präsentiert im Hauptrelief als zentrales Motiv die persönliche Devise des Grafen Wolfgang. Die Entschlüsselung der im Vertrag vom September 1601 vereinbarten „ihrer gnaden Diviso“[14] gelang erst vor wenigen Jahren Jürgen Kniep.[15] Dargestellt ist ein antikisch gekleideter Krieger, umgeben von den Symbolen der Kardinal- und theologischen Tugenden. Die Devise „Gott gibt Glück“ lässt den reformatorischen Glauben des Grafen Wolfgang ebenso erkennen wie die Betonung der Liebe (Herz in der linken Hand des Kriegers) und des Buches, aus dem die Schlange ihre Weisheit bezieht. Im Sinne der protestantischen Rechtfertigungslehre oblag es nicht dem Klerus, sondern allein Gott, dem Menschen Gnade angedeihen zu lassen.\n\n\nAls räumliches Gegenstück zum skulptierten Kamin entstand 1603 in einem Paragone der Techniken und Materialien das monumentale, aus Stuck gefertigte Innenportal an der Ostseite. Sein Aufbau ist wie der Kamin dreizonig mit rundbogiger Öffnung, Attikarelief und Auszug. Der Kalkschneider Gerhard Schmidt, der das Portal selbstbewusst mit seinen Initialen signiert hat, hat in der Türkenschlacht des Hauptreliefs mit extrem hinterschnittenen Pferde- und Soldatenleibern den moderater skulptierten Steinkamin an Kunstfertigkeit übertroffen. Einen Höhepunkt der Stuckateurskunst der Zeit bildet der vollplastisch gearbeitete heilige Georg auf seinem zum Sprung über den Drachen ansetzenden Pferd.\n\n\nDas Portal ist inhaltlich auf den ältesten Sohn des Grafen Wolfgang, Georg Friedrich, zu beziehen, der im Rang eines Obristen des Fränkischen Reichskreises und auch der kaiserlichen Armee im Langen Türkenkrieg (1593–1606) kämpfte.[16] Als einer seiner größten Erfolge gilt die versuchte Einnahme der Festung Gran (Eszergom) im Jahr 1594, an der er als kaiserlicher Obrist beteiligt war.[17] Die Festung, vor der sich auf dem Relief das Schlachtengetümmel abspielt, stellt in der Tat Eszergom da, was an der Höhenlage und der Zweiturmfassade der Kathedrale zu erkennen ist.[18] Der das Portal bekrönende heilige Georg als Drachentöter mit Lanze und zugleich Namenspatron des Erbprinzen sowie Patron der Stadtkirche wäre im Sinne des Protestantismus als tugendhafter Bezwinger des Bösen zu deuten.[19] Mit der Thematik des Langen Türkenkriegs bereitete das Portal auf die dahinterliegende Tafelstube vor, für deren Decke Balthasar Katzenberger 12 große Belagerungsszenen auf Leinwand malte.\n\n\nDas Portal von 1603 war aber nicht nur heroisch gestimmt. In den Zwickeln lagern Putti, die als Mahnung an die Endlichkeit des Lebens dem Betrachter ein Stundenglas, eine Sense und einen Schlüssel – vielleicht ins Himmelreich – vor Augen halten.\n\n\nDas Mobiliar\n\n\nDie renaissancezeitliche Ausstattung des Saals mit Mobilien geht aus einem 1625–1627 aufgenommenen Inventar hervor.[20] Die als erstes genannten „Ein und zwanzig Stuck goldt uf Leder tappezerey“ dürften als goldgeprägte Ledertapeten die Trumeaus zwischen den Fenstern geziert haben. Ledertapeten waren kostbar, was sich in ihrer erstplatzierten Nennung niederschlug.[21] An Stellmöbeln beinhaltete der Saal „Zwo lange Tafel“ und „Ein und dreissig von goldt uff Lederne Sessel“. Die Wände schmückten zusätzlich zu den Ledertapeten „Sechzehn gemahlte Tafeln“, also im Sujet nicht näher charakterisierte Gemälde. Die Beleuchtung erfolgte über „Acht große hülzerne Lichter, gemahlt“.\n\n\nVier Gemälde wurden zusätzlich zu den sechzehn aufgeführt, da sie vermutlich im Vorgängerinventar des Grafen Wolfgang, das dem Inventar als Vorlage diente, noch nicht enthalten waren. Sie stellten „Kaiser Matthie und der Kayserin / Item Meines Gnd. Herrn und gnl. Frawen Abcontrafehung“ dar. Kaiser Matthias regierte in den Jahren 1612–1619, seine Gemahlin Anna von Österreich-Tirol starb 1618. Die Gemälde stammten demnach aus der Zeit des Grafen Georg Friedrich von Hohenlohe-Weikersheim, der mit Eva von Waldstein verheiratet war.\n\n\n[1] HZAN La 130 Bü 152, Schadensinventar von 1639. Die Kenntnis und die Transkription dieser Archivalie verdankt die Autorin Frieder Leipold.\n\n\n[2] Der erhaltene Vertrag (HZAN We 50 D6) in Transkription bei Freeden, Kamin, 1950, S. 144–145. Bezahlt wurde Juncker im Oktober 1602.\n\n\n[3] Poser, Deckenbilder, 1980, S. 160–161.\n\n\n[4] Merten, Weikersheim, o. J., S. 44. Drös, Inschriften Mergentheim, 2002, S. 244. Zum Oeuvre und Lebensweg des Kalkschneiders Gerhard Schmidt: Kreder, Hellenstein, 2005/2006; Rinn-Kupka, Stuck, 2018, S. 126–129; Lange, ‚welsche Kamin‘, 2019.\n\n\n[5] Merten, Weikersheim, o. J., S. 44. Drös, Inschriften Mergentheim, 2002, S. 254.\n\n\n[6] Fandrey, Weikersheim, 2010, S. 55.\n\n\n[7] Dieser Befund kam bei der Restaurierung der Jahre 1995–1997 zutage. Für zahlreiche Informationen und die Übermittlung des Abschlussberichts vom 05.03.1998 dankt die Autorin Herrn Dipl.-Ing. Erik Reinhold, Staatliches Hochbauamt Heilbronn.\n\n\n[8] Die Vedute des Carlsberg bei Weikersheim kam erst 1747 im Zusammenhang mit der damals aufgestellten Kunstuhr hinzu, doch dürfte sie eine ältere Vedute am Fensterpfeiler hinter der Uhr ersetzt haben.\n\n\n[9] Valentin, Malerische Lebensläufe, 2019, Anm. 11. Zu Tassaert liegt ein Lebenslauf mit Werkverzeichnis vor: Schnurrer, Tassaert, 2014.\n\n\n[10] Die genauen Maße gibt Walther-Gerd Fleck (Weyer, Georg Stegle, 2017, S. 52).\n\n\n[11] Vgl. dagegen Gebeßler, Saal Süddeutschland, 1957, S. 49, der die Fensternischen aufgrund ihrer Dekoration als Anräume empfindet.\n\n\n[12] Das Portal wird in der Literatur zu Unrecht als Eingangsportal in den Saal beschrieben (Poser, Deckenbilder, 1980, S. 160; Kniep, Glück, 2005, S. 52 und 59; Käpplinger, Jagd, 2011, S. 73). Es ist jedoch nach innen gerichtet, führt also von innen nach außen. Außerdem folgt in der Wegeführung eines Renaissanceschlosses die Tafelstube auf den Rittersaal. Auch der Betrachterstandpunkt der Deckengemälde ist mit dem Rücken zum Kamin so ausgerichtet, dass man die Bilder vom Kamin kommend, Richtung Tafelstube gehend bewundert.\n\n\n[13] Zu den Ahnenproben: Drös, Inschriften Mergentheim, 2002, S. 255–261. Außerdem Kniep, Glück, 2005, S. 48–52.\n\n\n[14] Freeden, Kamin, 1950, S. 144.\n\n\n[15] Kniep, Glück, 2005, S. 57–74. Weiterführende Gedanken und Literatur zur Bildhauerfamilie Juncker liefert: Lange, ‚welsche Kamin‘, 2019.\n\n\n[16] Kniep, Glück, 2005, S. 52–57. Außerdem Findbuch HZAN La 130 Bü 102 (Bestallung zum Obristen des Fränkischen Reichskreises, 1598) und La 130 Bü 108 (Teilnahme als kaiserlicher Obrist am Feldzug gegen die Türken 1603).\n\n\n[17] Trentin-Meyer, Georg Friedrich von Hohenlohe, 2019, S. 90. Vgl. Niederkorn, Langer Türkenkrieg, 1993, S. 11.\n\n\n[18] Außerdem als Beleg die Darstellung in: Ortelius, Chronologia, 1602, Tf. „Wahre Contrafactur der Belagerung Gran, sampt der Schlacht so dabei geschehen, den 3. Augusti. Anno 1595“. Ortelius wählte für seine Illustration die erfolgreiche Belagerung und Schlacht von 1595. Die Belagerung von 1594 war für die Kaiserlichen noch nicht erfolgreich.\n\n\n[19] Kniep, Glück, 2005, S. 56.\n\n\n[20] Auszüge des Inventars stellte freundlicherweise Dinah Rottschäfer der Autorin zur Verfügung.\n\n\n[21] Bei dem von Käpplinger, Auf’s Schönste, 2019, S. 189 mit Anm. 3 genannten Inventar von 1634 handelt es sich um einen Schadensbericht, in dem die Ledertapeten verkürzt als „tappezereien von gold“ bezeichnet wurden, was Käpplinger in Unkenntnis des Vorgängerinventars als textile Wandbespannungen deutete.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Essay</span>"
    ]
  },
  {
    "objectID": "paintings.html",
    "href": "paintings.html",
    "title": "Paintings",
    "section": "",
    "text": "Get data of image items from wikibase\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q212\nTitle: Rittersaal & Raum 72 – nach Westen\nYear: 2018\nDescription: Teil von: Schloss Weikersheim SaalbauWolfgang Beringer, Baumeister & Steinmetz - Georg Stegle, Baumeister - Entwurf: Georges Robin, Architekt - Elias Gunzenhäuser, Zimmermann - Weikersheim, Marktplatz 11 - ab 1595\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q213\nTitle: Löwenpaar – Gesamtansicht\nYear: 2018\nDescription: Gerhardt Schmidt, Bildhauer - Mitarbeit: Christoph Limmerich, Bildhauer - Mitarbeit: Caspar Dieterich, Fassmaler - Weikersheim, Schloss Weikersheim, Rittersaal & Raum 72 - Vollendung: 1605 - 1747\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q214\nTitle: Bär – Gesamtansicht\nYear: 2018\nDescription: Gerhardt Schmidt, Bildhauer - Mitarbeit: Christoph Limmerich, Bildhauer - Mitarbeit: Caspar Dieterich, Fassmaler - Weikersheim, Schloss Weikersheim, Rittersaal & Raum 72 - Vollendung: 1605 - 1747\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q215\nTitle: Hirschpaare – Gesamtansicht\nYear: 2018\nDescription: Gerhardt Schmidt, Bildhauer - Mitarbeit: Christoph Limmerich, Bildhauer - Mitarbeit: Caspar Dieterich, Fassmaler - Weikersheim, Schloss Weikersheim, Rittersaal & Raum 72 - Vollendung: 1605 - 1747\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q216\nTitle: Affe – Gesamtansicht\nYear: 2018\nDescription: Gerhardt Schmidt, Bildhauer - Mitarbeit: Christoph Limmerich, Bildhauer - Mitarbeit: Caspar Dieterich, Fassmaler - Weikersheim, Schloss Weikersheim, Rittersaal & Raum 72 - Vollendung: 1605 - 1747\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q200\nTitle: Rittersaal & Raum 72 – nach Osten\nYear: 2018-01-01T00:00:00Z\nDescription: Teil von: Schloss Weikersheim Saalbau Wolfgang Beringer, Baumeister & Steinmetz - Georg Stegle, Baumeister - Entwurf: Georges Robin, Architekt - Elias Gunzenhäuser, Zimmermann - Weikersheim, Marktplatz 11 - ab 1595\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q211\nTitle: Rittersaal & Raum 72 – nach Osten\nYear: 2018-01-01T00:00:00Z\nDescription: Teil von: Schloss Weikersheim SaalbauWolfgang Beringer, Baumeister & Steinmetz - Georg Stegle, Baumeister - Entwurf: Georges Robin, Architekt - Elias Gunzenhäuser, Zimmermann - Weikersheim, Marktplatz 11 - ab 1595\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q212\nTitle: Rittersaal & Raum 72 – nach Westen\nYear: 2018-01-01T00:00:00Z\nDescription: Teil von: Schloss Weikersheim SaalbauWolfgang Beringer, Baumeister & Steinmetz - Georg Stegle, Baumeister - Entwurf: Georges Robin, Architekt - Elias Gunzenhäuser, Zimmermann - Weikersheim, Marktplatz 11 - ab 1595\n\nWikibase link: https://computational-publishing-service.wikibase.cloud/entity/Q213\nTitle: Löwenpaar – Gesamtansicht\nYear: 2018-01-01T00:00:00Z\nDescription: Gerhardt Schmidt, Bildhauer - Mitarbeit: Christoph Limmerich, Bildhauer - Mitarbeit: Caspar Dieterich, Fassmaler - Weikersheim, Schloss Weikersheim, Rittersaal & Raum 72 - Vollendung: 1605 - 1747\n\n---------------------------------------------------------------------------\nTimeoutError                              Traceback (most recent call last)\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connection.py:203, in HTTPConnection._new_conn(self)\n    202 try:\n--&gt; 203     sock = connection.create_connection(\n    204         (self._dns_host, self.port),\n    205         self.timeout,\n    206         source_address=self.source_address,\n    207         socket_options=self.socket_options,\n    208     )\n    209 except socket.gaierror as e:\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\util\\connection.py:85, in create_connection(address, timeout, source_address, socket_options)\n     84 try:\n---&gt; 85     raise err\n     86 finally:\n     87     # Break explicitly a reference cycle\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\util\\connection.py:73, in create_connection(address, timeout, source_address, socket_options)\n     72     sock.bind(source_address)\n---&gt; 73 sock.connect(sa)\n     74 # Break explicitly a reference cycle\n\nTimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\n\nThe above exception was the direct cause of the following exception:\n\nConnectTimeoutError                       Traceback (most recent call last)\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connectionpool.py:790, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\n    789 # Make the request on the HTTPConnection object\n--&gt; 790 response = self._make_request(\n    791     conn,\n    792     method,\n    793     url,\n    794     timeout=timeout_obj,\n    795     body=body,\n    796     headers=headers,\n    797     chunked=chunked,\n    798     retries=retries,\n    799     response_conn=response_conn,\n    800     preload_content=preload_content,\n    801     decode_content=decode_content,\n    802     **response_kw,\n    803 )\n    805 # Everything went great!\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connectionpool.py:491, in HTTPConnectionPool._make_request(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\n    490         new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n--&gt; 491     raise new_e\n    493 # conn.request() calls http.client.*.request, not the method in\n    494 # urllib3.request. It also calls makefile (recv) on the socket.\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connectionpool.py:467, in HTTPConnectionPool._make_request(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\n    466 try:\n--&gt; 467     self._validate_conn(conn)\n    468 except (SocketTimeout, BaseSSLError) as e:\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connectionpool.py:1092, in HTTPSConnectionPool._validate_conn(self, conn)\n   1091 if conn.is_closed:\n-&gt; 1092     conn.connect()\n   1094 if not conn.is_verified:\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connection.py:611, in HTTPSConnection.connect(self)\n    610 sock: socket.socket | ssl.SSLSocket\n--&gt; 611 self.sock = sock = self._new_conn()\n    612 server_hostname: str = self.host\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connection.py:212, in HTTPConnection._new_conn(self)\n    211 except SocketTimeout as e:\n--&gt; 212     raise ConnectTimeoutError(\n    213         self,\n    214         f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n    215     ) from e\n    217 except OSError as e:\n\nConnectTimeoutError: (&lt;urllib3.connection.HTTPSConnection object at 0x0000010A5ECAE750&gt;, 'Connection to previous.bildindex.de timed out. (connect timeout=None)')\n\nThe above exception was the direct cause of the following exception:\n\nMaxRetryError                             Traceback (most recent call last)\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\adapters.py:486, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies)\n    485 try:\n--&gt; 486     resp = conn.urlopen(\n    487         method=request.method,\n    488         url=url,\n    489         body=request.body,\n    490         headers=request.headers,\n    491         redirect=False,\n    492         assert_same_host=False,\n    493         preload_content=False,\n    494         decode_content=False,\n    495         retries=self.max_retries,\n    496         timeout=timeout,\n    497         chunked=chunked,\n    498     )\n    500 except (ProtocolError, OSError) as err:\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\connectionpool.py:844, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\n    842     new_e = ProtocolError(\"Connection aborted.\", new_e)\n--&gt; 844 retries = retries.increment(\n    845     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n    846 )\n    847 retries.sleep()\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\urllib3\\util\\retry.py:515, in Retry.increment(self, method, url, response, error, _pool, _stacktrace)\n    514     reason = error or ResponseError(cause)\n--&gt; 515     raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    517 log.debug(\"Incremented Retry for (url='%s'): %r\", url, new_retry)\n\nMaxRetryError: HTTPSConnectionPool(host='previous.bildindex.de', port=443): Max retries exceeded with url: /bilder/fmd10005864a.jpg (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x0000010A5ECAE750&gt;, 'Connection to previous.bildindex.de timed out. (connect timeout=None)'))\n\nDuring handling of the above exception, another exception occurred:\n\nConnectTimeout                            Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 get_img()\n\nCell In[1], line 141, in get_img()\n    139 image_url=item['imgUrl']['value']\n    140 headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n--&gt; 141 im = fetch_image_by_url(image_url, headers)\n    142 im.thumbnail((500, 500), Image.Resampling.LANCZOS)\n    143 display(im)\n\nCell In[1], line 115, in fetch_image_by_url(url, headers)\n    114 def fetch_image_by_url(url, headers):\n--&gt; 115     r = requests.get(url, headers=headers, stream=True)\n    116     if r.status_code == 200:\n    117         im = Image.open(r.raw)\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\api.py:73, in get(url, params, **kwargs)\n     62 def get(url, params=None, **kwargs):\n     63     r\"\"\"Sends a GET request.\n     64 \n     65     :param url: URL for the new :class:`Request` object.\n   (...)\n     70     :rtype: requests.Response\n     71     \"\"\"\n---&gt; 73     return request(\"get\", url, params=params, **kwargs)\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\api.py:59, in request(method, url, **kwargs)\n     55 # By using the 'with' statement we are sure the session is closed, thus we\n     56 # avoid leaving sockets open which can trigger a ResourceWarning in some\n     57 # cases, and look like a memory leak in others.\n     58 with sessions.Session() as session:\n---&gt; 59     return session.request(method=method, url=url, **kwargs)\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\sessions.py:589, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\n    584 send_kwargs = {\n    585     \"timeout\": timeout,\n    586     \"allow_redirects\": allow_redirects,\n    587 }\n    588 send_kwargs.update(settings)\n--&gt; 589 resp = self.send(prep, **send_kwargs)\n    591 return resp\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\sessions.py:703, in Session.send(self, request, **kwargs)\n    700 start = preferred_clock()\n    702 # Send the request\n--&gt; 703 r = adapter.send(request, **kwargs)\n    705 # Total elapsed time of the request (approximately)\n    706 elapsed = preferred_clock() - start\n\nFile ~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\requests\\adapters.py:507, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies)\n    504 if isinstance(e.reason, ConnectTimeoutError):\n    505     # TODO: Remove this in 3.0.0: see #2811\n    506     if not isinstance(e.reason, NewConnectionError):\n--&gt; 507         raise ConnectTimeout(e, request=request)\n    509 if isinstance(e.reason, ResponseError):\n    510     raise RetryError(e, request=request)\n\nConnectTimeout: HTTPSConnectionPool(host='previous.bildindex.de', port=443): Max retries exceeded with url: /bilder/fmd10005864a.jpg (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x0000010A5ECAE750&gt;, 'Connection to previous.bildindex.de timed out. (connect timeout=None)'))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Paintings</span>"
    ]
  },
  {
    "objectID": "datavis.html",
    "href": "datavis.html",
    "title": "Data Visualisation",
    "section": "",
    "text": "Generate wordcloud\nC:\\Users\\worthingtons\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\VizKG\\utils\\util.py:89: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n  dataframe[column] = dataframe[column].astype('datetime64')\nC:\\Users\\worthingtons\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\VizKG\\utils\\util.py:89: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n  dataframe[column] = dataframe[column].astype('datetime64')",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "painting-collection.html",
    "href": "painting-collection.html",
    "title": "Gemälde-Sammlung: Wikidata benchmark",
    "section": "",
    "text": "Objective: Make a selection of nine paintings for the exhibition catalogue to be selected from Wikidata and rendered multi-format in Quarto.\nThe below Python code uses SPARQLWrapper to retrieve data from Wikidata based on a SPARQL query.\nThis page acts as a ‘benchmark’ to test if data fields can be read from Wikidata.\nWikidata link: http://www.wikidata.org/entity/Q29474642\nTitle: The Birth of Benjamin\nYear: 1650\nCreator: Francesco Furini\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29474644\nTitle: Venetian Gala Concert\nYear: 1782\nCreator: Francesco Guardi\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29474645\nTitle: Q29474645\nYear: 1789\nCreator: Francesco Guardi\nCopyright: public domain",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Gemälde-Sammlung: Wikidata benchmark</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Weikersheim, Residenzschloss",
    "section": "",
    "text": "Katalog zur Ausstellung: Der Große Saal (Rittersaal)\nEin Katalog mit Kunstwerken aus der CbDD-Sammlung. Textteil: 6e73f774-4b7f-4e37-937b-e11cc35c5bc8\nGroßer Saal (Rittersaal) [Raum] Name: Großer Saal (Rittersaal) ID: 15685f4a-3727-4110-8967-1d8287431997 Typ: Raum Länge (m): 36.4 Breite (m): 11.7 Höhe (m): 8.25 Funktion [Raum]: Saal -&gt; Hauptsaal Datierung [Raum]: 1601-1605 hat Auftraggeber: Wolfgang II., Hohenlohe-Weikersheim, Graf [Person] hat Auftraggeber: Carl Ludwig, Hohenlohe-Weikersheim, Graf [Person] hat Teil: Malerei des Barock [Malerei] hat Teil: Malerei der Renaissance [Malerei] hat Stuckateur: Schmidt, Gerhard [Person] hat Stuckateur: Limmerich, Christoph [Person] hat Bildhauer: Juncker, Michael [Person] ist dokumentiert in: Der Große Saal (Rittersaal) [Textteil] ist Teil von: Erschließungsraumfolgen [Raumfolge] Erstellung des Datensatzes: 2020-05-19, 11:18 letzte Bearbeitung: 2023-10-16, 14:28\n This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International License.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Katalog zur Ausstellung: Der Große Saal (Rittersaal)</span>"
    ]
  },
  {
    "objectID": "impressum.html",
    "href": "impressum.html",
    "title": "Impressum",
    "section": "",
    "text": "Veröffentlichungsmetadaten, die aus dem Thoth.pub GraphQL API. https://api.thoth.pub/graphiql\nKatalog zur Ausstellung: Der Große Saal (Rittersaal) Weikersheim, Residenzschloss\nOpen Science Lab - TIB Hannover\nFirst published 2024-04-16\nCopyright © The authors 2024 Licensed as https://creativecommons.org/licenses/by-nc-nd/4.0/\nDOI: https://doi.org/10.5281/zenodo.10977822",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Impressum</span>"
    ]
  }
]